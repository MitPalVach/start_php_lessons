<?php
// =========================================================================================== Получение данных от формы
//  Нужно проверить, была ли отправлена форма, для этого будем использовать глобальную переменную $_SERVER и проверять REQUEST_METHOD
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $name = $_POST['name'];
    $surname = $_POST['surname'];
    $email = $_POST['email'];
    $message = $_POST['message'];
    echo htmlspecialchars($_POST['name']) . '<br>';
    echo htmlspecialchars($_POST['surname']) . '<br>';
    echo htmlspecialchars($_POST['email']) . '<br>';
    echo htmlspecialchars($_POST['message']) . '<br>';
}
//  или echo $name.'<br>'.$surname.'<br>'.$email.'<br>'.$message.'<br>'
//  Дальше, если форма отправлена, мы можем получить данные от поля "Имя", для этого, какой-нибуть переменной
//  присваиваем полученное значение от этого поля, например: 4-7 строка
//  $_POST - переменная, в которой сохраняются данные, если форма была отправлена методом POST.
//  $_POST['name'] - получаем данные от поля name.
//  Данные мы получили, теперь мы можем их вывести, для этого в страницу обработчика дописываем код: 8 строка
// =============================================================================================== Проверка данных формы
//  Проверяем на корректность вводимых данных, если создать форму без проверки, "плохие" пользователи могут навредить сайту
//  Используем предыдущий код
//  Создаемфункцию для очистки данных от HTML и PHP тегов:
function clean($value = '')
{
    $value = trim($value);
    $value = stripslashes($value);
    $value = strip_tags($value);
    $value = htmlspecialchars($value);
    return $value;
}
//  Здесь, мы использовали функцию trim для удаления пробелов из начала и конца строки.
//  Функция stripslashes нужна для удаления экранированных символов ("Ваc зовут O\'reilly?" => "Вас зовут O'reilly?").
//  Функция strip_tags нужна для удаления HTML и PHP тегов.
//  Функция htmlspecialchars преобразует специальные символы в HTML-сущности ('&' преобразуется в '&amp;' и т.д.)
//  Дальше, создадим функцию для проверки длинны строки:
function check_length($value = '', $min, $max)
{
    $result = (mb_strlen($value) < $min || mb_strlen($value) > $max);
    return !$result;
}
//  Здесь, мы использовали функцию mb_strlen для проверки длинны строки. Первый параметр, $value это строка, которую
//  нужно проверить, второй параметр $min минимально допустимая длинна строки, третий параметр $max - максимально
//  допустимая длинна. Если длинна строки будет удовлетворительна, то функция вернет TRUE иначе FALSE.
//  Нужно "прогнать" переменные через эти функции:
$name = clean($name);
$surname = clean($surname);
$email = clean($email);
$message = clean($message);
if (!empty($name) && !empty($surname) && !empty($email) && !empty($message)) {
    $email_validate = filter_var($email, FILTER_VALIDATE_EMAIL);
    if (check_length($name, 2, 25) && check_length($surname, 2, 50) && check_length($message, 2, 1000) && $email_validate) {
        //  Если значения не пустые (проверили с помощью функции empty), то можно продолжать проверку дальше
        //  Если длинна значений переменных нас устраивает, то можем продолжать. Также, мы использовали
        //  функцию filter_var с параметром FILTER_VALIDATE_EMAIL для валидации электронного адреса.
        //  Давайте добавим сообщение об успешности операции, если данные прошли все проверки.
    echo 'Спасибо за сообщение';
    } else {
        echo 'Введенные данные некорректны';
    }
} else {
    echo 'Заполните пустые поля';
}
























